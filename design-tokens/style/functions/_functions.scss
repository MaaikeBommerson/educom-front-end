@use "sass:map";

$types: "light", "dark";

// darken or lighten a 
// specific color with a specific percentage
@function shade($type, $c, $percentage) {
    @if $type == "light" {
        @return(lighten($c, $percentage));
    } @else {
        @return(darken($c, $percentage));
    }
}

// create a set of color shades for each style
// passed in
@function rootColor($type, $key, $style) {
    $color: map.get($style, 'color');
    $shades: map.get($style, 'shades');

    // define empty array
    $e: ();

    // base color
    // will output --bg-primary or --fg-primary
    $class: "--" + $key + "-" + $type;
    $e: map.set($e, $class, $color);

    // shades
    @each $t in $types {
        @each $shade in $shades {
            // call the shade function above
            $s: shade($t, $color, $shade);

            $class: "--" + $key + "-" + $type + "-" + $t + "-" + $shade;
            $e: map.set($e, $class, $s);
        }
    }

    @return($e);
}

@function utilityColor($type, $key, $style) {
    $type: map.get($style, 'type');
    $color: map.get($style, 'color');
    $shades: map.get($style, 'shades');

    $e: ();

    // base color
    $class: "." + $key + "-" + $type;
    $var: "var(--" + $key + "-" + $type + ")";
    $e: map.set($e, $class, $var);

    // shades
    @each $t in $types {
        @each $shade in $shades {
          $class: "." + $key + "-" + $type + "-" + $t + "-"+ $shade;
          $var: "var(--" + $key + "-" + $type + "-" + $t + "-" + $shade + ")";
          $e: map.set($e, $class, $var);
        }
      }
    @return($e);
}

